import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# === ‡§Ö‡§™‡§®‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä Render ‡§™‡§∞ Environment Variables ‡§Æ‡•á‡§Ç ‡§°‡§æ‡§≤‡§®‡§æ ‡§π‡•à ===
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
ADMIN_ID = int(os.getenv("ADMIN_ID", "7788642203"))

pending_reply_to = {}

def user_tag(u):
    handle = f"@{u.username}" if u.username else ""
    name = f"{(u.first_name or '').strip()} {(u.last_name or '').strip()}".strip()
    name = name or "Unknown"
    return f"{name} {handle}".strip()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user and user.id == ADMIN_ID:
        await update.message.reply_text("‡§®‡§Æ‡§∏‡•ç‡§§‡•á Admin! ‡§Ö‡§¨ ‡§∏‡•á ‡§Ø‡•Ç‡§ú‡§º‡§∞‡•ç‡§∏ ‡§ï‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§Ø‡§π‡•Ä‡§Ç ‡§Ü‡§è‡§Å‡§ó‡•á‡•§")
    else:
        await update.message.reply_text("‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≤‡§ø‡§ñ‡§ø‡§è, Admin ‡§§‡§ï ‡§™‡§π‡•Å‡§Å‡§ö‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (
        "‡§Ø‡§π ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§¨‡•â‡§ü ‡§π‡•à:\n"
        "- ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ Admin ‡§§‡§ï ‡§™‡§π‡•Å‡§Å‡§ö‡§§‡§æ ‡§π‡•à‡•§\n"
        "- Admin ‡§ï‡•á ‡§ú‡§µ‡§æ‡§¨ ‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á‡§Ç‡§ó‡•á‡•§\n\n"
        "Admin ‡§ï‡•á ‡§≤‡§ø‡§è:\n"
        "1) ‡§ï‡§ø‡§∏‡•Ä ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ï‡•á ‡§®‡•Ä‡§ö‡•á 'Reply' ‡§¶‡§¨‡§æ‡§è‡§Å ‡§î‡§∞ ‡§Ö‡§™‡§®‡§æ ‡§ú‡§µ‡§æ‡§¨ ‡§≠‡•á‡§ú‡•á‡§Ç‡•§\n"
        "2) ‡§Ø‡§æ /reply <user_id> <message> ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§"
    )
    await update.message.reply_text(txt)

async def on_any_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    user = update.effective_user
    chat = update.effective_chat

    if user and user.id == ADMIN_ID:
        target_user_id = pending_reply_to.get(ADMIN_ID)
        if target_user_id:
            await context.bot.copy_message(
                chat_id=target_user_id,
                from_chat_id=chat.id,
                message_id=msg.message_id
            )
            await msg.reply_text("‚úÖ Reply ‡§≠‡•á‡§ú ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§")
            pending_reply_to.pop(ADMIN_ID, None)
        return

    header = f"üì© From: {user_tag(user)}\nüÜî user_id: {user.id}"
    keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton("‚Ü©Ô∏è Reply", callback_data=f"reply:{user.id}")
    )

    await context.bot.send_message(chat_id=ADMIN_ID, text=header)

    await context.bot.copy_message(
        chat_id=ADMIN_ID,
        from_chat_id=chat.id,
        message_id=msg.message_id,
        reply_markup=keyboard
    )

    await msg.reply_text("‚úÖ ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ Admin ‡§§‡§ï ‡§™‡§π‡•Å‡§Å‡§ö ‡§ó‡§Ø‡§æ‡•§ ‡§ú‡§µ‡§æ‡§¨ ‡§Ø‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ‡•§")

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data or ""
    await query.answer()

    if not update.effective_user or update.effective_user.id != ADMIN_ID:
        await query.edit_message_reply_markup(None)
        return

    if data.startswith("reply:"):
        try:
            user_id = int(data.split(":", 1)[1])
            pending_reply_to[ADMIN_ID] = user_id
            await query.message.reply_text(
                f"‚úçÔ∏è ‡§Ö‡§¨ ‡§Ö‡§™‡§®‡§æ ‡§ú‡§µ‡§æ‡§¨ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç (‡§≠‡•á‡§ú‡§§‡•á ‡§π‡•Ä user_id {user_id} ‡§ï‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ)‡•§"
            )
        except:
            await query.message.reply_text("‚ùå Reply ‡§∏‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§¶‡§ø‡§ï‡•ç‡§ï‡§§ ‡§π‡•Å‡§à‡•§")

async def reply_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user or update.effective_user.id != ADMIN_ID:
        return

    if len(context.args) < 2:
        await update.message.reply_text("‡§â‡§™‡§Ø‡•ã‡§ó: /reply <user_id> <message>")
        return

    try:
        user_id = int(context.args[0])
    except:
        await update.message.reply_text("‚ùå user_id numeric ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return

    text = " ".join(context.args[1:])
    if not text.strip():
        await update.message.reply_text("‚ùå ‡§ñ‡§æ‡§≤‡•Ä ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§®‡§π‡•Ä‡§Ç ‡§≠‡•á‡§ú ‡§∏‡§ï‡§§‡•á‡•§")
        return

    await context.bot.send_message(chat_id=user_id, text=f"üëÆ Admin:\n{text}")
    await update.message.reply_text("‚úÖ Reply ‡§≠‡•á‡§ú ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§")

def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç!")

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(CommandHandler("reply", reply_cmd))

    application.add_handler(CallbackQueryHandler(on_callback))
    application.add_handler(MessageHandler(filters.ALL, on_any_user_message))

    print("Bot is running‚Ä¶")
    application.run_polling()

if __name__ == "__main__":
    main()
